#version 400 core

in vec2 pass_texture_coords;
in vec3 surface_normal;
in vec3 to_light_vector;
in vec3 to_camera_vector;

out vec4 out_color;

uniform sampler2D texture_sampler;
uniform vec3 light_color;
uniform float shine_damper;
uniform float reflectivity;

void main(void){
	vec3 unit_normal = normalize(surface_normal);
	vec3 unit_light_vector = normalize(to_light_vector);
	
	float nDot1 = dot(unit_normal, unit_light_vector);
	float brightness = max(nDot1, 0.2);
	vec3 diffuse = brightness * light_color;
	
	vec3 unit_to_camera_vector = normalize(to_camera_vector);
	vec3 light_direction = -unit_light_vector;
	vec3 reflected_light_direction = reflect(light_direction, unit_normal);
	
	float specular_factor = dot(reflected_light_direction, unit_to_camera_vector);
	specular_factor = max(specular_factor, 0.0);
	float damped_factor = pow(specular_factor, shine_damper);
	vec3 final_speculuar = damped_factor * reflectivity * light_color;
	
	vec4 texture_color = texture(texture_sampler, pass_texture_coords);
	if(texture_color.a < 0.5){
		discard;
	}
	
	out_color = vec4(diffuse, 1.0) * texture_color + vec4(final_speculuar, 1.0);
}